use serenity::client::Context;
use serenity::framework::{Framework, StandardFramework};
use serenity::model::channel::Message;
use async_trait::async_trait;
use serenity::framework::standard::{CommandError, CommandGroup, DispatchError};
use serenity::futures::future::BoxFuture;


pub struct CowFramework {
    internal_framework: StandardFramework
}

// Note: this is all copied from standard/mod.rs.
#[allow(dead_code)]
type DispatchHook =
    for<'fut> fn(&'fut Context, &'fut Message, DispatchError, &'fut str) -> BoxFuture<'fut, ()>;
#[allow(dead_code)]
type BeforeHook = for<'fut> fn(&'fut Context, &'fut Message, &'fut str) -> BoxFuture<'fut, bool>;
#[allow(dead_code)]
type AfterHook = for<'fut> fn(
    &'fut Context,
    &'fut Message,
    &'fut str,
    Result<(), CommandError>,
) -> BoxFuture<'fut, ()>;
#[allow(dead_code)]
type UnrecognisedHook =
    for<'fut> fn(&'fut Context, &'fut Message, &'fut str) -> BoxFuture<'fut, ()>;
#[allow(dead_code)]
type NormalMessageHook = for<'fut> fn(&'fut Context, &'fut Message) -> BoxFuture<'fut, ()>;
#[allow(dead_code)]
type PrefixOnlyHook = for<'fut> fn(&'fut Context, &'fut Message) -> BoxFuture<'fut, ()>;

impl CowFramework {
    pub fn new() -> CowFramework {
        CowFramework {
            internal_framework: StandardFramework::new()
        }
    }

    pub fn group(mut self, group: &'static CommandGroup) -> Self {
        self.internal_framework = self.internal_framework.group(group);

        self
    }

    pub fn group_add(&mut self, group: &'static CommandGroup) {
        self.internal_framework.group_add(group);
    }

    pub fn group_remove(&mut self, group: &'static CommandGroup) {
        self.internal_framework.group_remove(group);
    }

    pub fn on_dispatch_error(mut self, f: DispatchHook) -> Self {
        self.internal_framework = self.internal_framework.on_dispatch_error(f);

        self
    }

    pub fn prefix_only(mut self, f: PrefixOnlyHook) -> Self {
        self.internal_framework = self.internal_framework.prefix_only(f);

        self
    }

    pub fn before(mut self, f: BeforeHook) -> Self {
        self.internal_framework = self.internal_framework.before(f);

        self
    }

    pub fn after(mut self, f: AfterHook) -> Self {
        self.internal_framework = self.internal_framework.after(f);

        self
    }

    pub fn unrecognised_command(mut self, f: UnrecognisedHook) -> Self {
        self.internal_framework = self.internal_framework.unrecognised_command(f);

        self
    }
}

#[async_trait]
impl Framework for CowFramework {
    async fn dispatch(&self, ctx: Context, msg: Message) {
        // Check if it's a slash command (generated by the interaction handler)
        if msg.id == 69420 {

        }

        self.internal_framework.dispatch(ctx, msg).await;
    }
}